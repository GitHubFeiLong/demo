<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:cache="http://www.springframework.org/schema/cache"
	   xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			   http://www.springframework.org/schema/aop
			   http://www.springframework.org/schema/aop/spring-aop.xsd
			   http://www.springframework.org/schema/cache
			   http://www.springframework.org/schema/cache/spring-cache.xsd
			   http://www.springframework.org/schema/context
			   http://www.springframework.org/schema/context/spring-context-4.2.xsd">

	<!-- 引入配置文件 -->
	<context:property-placeholder order="0"  location="classpath:redis.properties" ignore-unresolvable="true"/>
	<!--<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:redis.properties" />
	</bean>-->

	<!-- jedis 配置 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 最大空闲数 -->
		<property name="maxIdle" value="${redis.maxIdle}" />
		<!-- 最大链接数 -->
		<property name="maxTotal" value="${redis.maxActive}" />
		<!-- 最大等待时间 -->
		<property name="maxWaitMillis" value="${redis.maxWait}"></property>
		<!-- 返回连接时，检测连接是否成功 -->
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>

	<!-- redis服务器中心 -->
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
	      p:host-name="${redis.host}"
	      p:port="${redis.port}"
	      p:password="${redis.pass}"
	      p:pool-config-ref="poolConfig"/>

	<!-- redis 集群 -->
	<!--  <bean id="redisClient" class="redis.clients.jedis.JedisCluster">
		  <constructor-arg name="nodes">
			  <bean class="redis.clients.jedis.HostAndPort">
				<constructor-arg name="host" value="192.168.10.105"></constructor-arg>
				<constructor-arg name="port" value="7002"></constructor-arg>
			</bean>
			<bean class="redis.clients.jedis.HostAndPort">
				<constructor-arg name="host" value="192.168.10.77"></constructor-arg>
				<constructor-arg name="port" value="7002"></constructor-arg>
			</bean>
		  </constructor-arg>
	 </bean>  -->

	<!-- redis模板类，提供了对缓存的增删改查 -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory"/>
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
		</property>
	</bean>

	<!-- StrRedisTemplate -->
	<bean id="strRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
	</bean>

	<!-- cache 缓存拦截器配置 -->
	<bean id="methodCacheInterceptor" class="com.ssm.mf.utils.MethodCacheInterceptor">
		<property name="redisUtil" ref="redisUtil"/>
		<property name="defaultCacheExpireTime" value="${redis.cacheExpireTime}"/>
		<!-- 禁用缓存的类名列表 -->
		<property name="targetNamesList">
			<list>
				<value></value>
			</list>
		</property>
		<!-- 禁用缓存的方法名列表 -->
		<property name="methodNamesList">
			<list>
				<value></value>
			</list>
		</property>
	</bean>

	<bean id="redisUtil" class="com.ssm.mf.utils.RedisUtil">
		<property name="redisTemplate" ref="redisTemplate"/>
	</bean>

	<!--配置切面拦截方法 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="controllerMethodPointcut" expression="execution(* com.ssm.mf.*.service.impl.*.select*(..))"/>
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut-ref="controllerMethodPointcut"/>
	</aop:config>

	<!-- Redis缓存管理对象 -->
	<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg index="0" ref="redisTemplate" />
	</bean>
	<!-- 开启Spring缓存 -->
	<cache:annotation-driven cache-manager="cacheManager"/>

</beans>
